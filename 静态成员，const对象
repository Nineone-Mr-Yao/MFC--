C++类的静态成员
类的静态成员分为静态数据成员和静态成员函数
静态数据成员
假如我们要设计一个战争游戏，游戏中有许多的兵种。游戏的过程中，每隔一段时间每个兵种都会产生，同时由于战争的消耗，每个兵种士兵的数量又会减少。为了情节更逼真呐，我们引入了一个士气的概念，当士气比较高的时候，这个兵种的士气战斗力就会很强，士气较低的时候，兵种的战斗力就会比较弱。兵种的士气受很多因素影响，其中一个最直接的因素就是士兵的数量相关，它与数量成正比。我们就需要一组全局变量，每个变量都会记录当前兵种的数量，但是使用全局变量会引入很多的问题，使用全局变量的安全得不到保障，我们可以在程序的任何地方修改它的值。全局变量还可能导致命名空间的污染，当程序比较大的时候，各个模块之间有可能冲突。那如果不使用全局变量，我们就可以使用静态的数据成员。
静态数据成员：以static开头。静态数据成员为各个对象共有，不属于某个具体的对象，所有对象都可以对它进行引用，都可以读取和修改。若一个对象修改了该静态成员的值，则在其他各个对象中该数据成员的值都会同时改变。
定义类时就为静态数据成员分配空间，不随对象的建立而分配空间。可以说它是属于这个类的，定义完类之后就可以引用。
1.定义方法
static  int count；//定义了一个int类型的静态数据成员，它的定义是在类里面，但是初始化不可以在类的里面类外面初始化 （你可以在类的实现文件里面初始化）：
int CTime：：count=0；//初始化不要再加static
2调用方法
1）类名::静态成员
2）对象名.静态成员
在类内的静态数据成员仅仅是对该成员的声明，同时还需要在类外部进行定义。
当我们在构造函数里面对它++然后输出，在析构函数里面—输出就得到这样的结果：构造函数调用的次数就是创建对象的个数，析构函数调用的次数就是销毁对象的次数。
静态成员函数
在声明成员函数时在函数前添加static关键字就定义了静态成员函数。
与静态数据成员一样，静态成员函数也是类的一部分。
1.声明静态成员函数
static int func();  //定义的时候不需要static关键字
2.调用静态成员函数
1）类名::静态成员函数
2）对象名.静态成员函数
静态成员函数一般是为了处理静态的数据成员。
与一般成员函数的区别：
1）非静态成员函数有this指针，静态成员函数没有this指针。
2）因为它可以在未定义类对象时就可以引用。
因此静态成员函数不能访问本类中的非静态成员（没有this指针，就不能通过引用调用成员函数和数据成员）。

C++ const对象
const对象
如果我们希望某一个对象在定义之后不被错误的修改，我们可以将这个对象声明为const对象，这样这个对象的数据成员就不可以被更改。
1.定义const对象
const 类名 对象名；
类名 const 对象名；
1）定义类对象时可以将其指定为const对象。定义后const对象不能再被修改；
2）const对象不能调用非const类型的成员函数。
在非const成员函数内部，有可能会对对象的数据成员进行修改，比如setHour()修改了对象的Hour值。而const类型的成员函数是不会修改对象的数据成员的。
const数据成员
1.const数据成员
在类内部使用const关键字来声明const数据成员。const数据成员的值不能被修改。
const  int m_nNum；//定义了一个const数据成员
初始化时比较特殊，只能通过初始化列表初始化。不能在构造函数里赋值。
2.初始化列表
构造函数初始化列表以一个冒号开始，接着是以逗号分隔的数据成员列表，每个数据成员后面跟一个放在括号中的初始化式。
初始化列表可以为数据成员初始化，不仅仅只是const数据成员。
我们在构造函数外面添加了初始化列表，这个列表里面为const成员m_nNum赋了初始值10，如果我们有多个构造函数，必须在每一个构造函数外面都对这个const成员添加初始化列表初始化，包括复制构造函数。
const成员函数
1.const成员函数只能被const对象引用；
2.const成员函数内可以引用const数据成员，也可以引用非const数据成员，但不能修改非const数据成员的值，也不能调用非const成员函数；
3.const成员函数在声明和定义的时候都必须加上const。
