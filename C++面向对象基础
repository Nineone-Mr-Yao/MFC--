面向对象设计我们需要考虑两方面：
1）考虑设计的类和对象，考虑它们的数据和数据封装；
2）考虑对象之间如何交互，如何发送消息完成任务的，它们需要完成各自的任务，那样总体的任务也就完成了。
面向对象软件开发步骤
1.面向对象分析（Object oriented analysis)
这个时候系统分析员要和用户在一起，对用户的需求做出一些精确的分析，明确的描述。它会从宏观的角度根据事物与事物的关系，将相似属性和行为的对象用类来表示。
2.面向对象设计（Object oriented design
OOA建立了一个反应真实需求的模型，但是这个模型是比较粗略的。我们根据这个模型对每一部分进行设计，进行类的设计，它会包含很多个层次。这里并不设计编程语言，而是使用一种更通用的描述工具—UML。UML是一种通用的建模语言，这个如果大家有兴趣的话，可以自己去了解。
3.面向对象编程（Object oriented programming)
根据前面设计的结果使用面向对象的一种语言来将它实现，比如C++，JAVA，C#等等….
类是C++中非常重要的概念，它是实现面向对象程序设计的基础，一个具有一定规模的C++程序应该是由许多类组成的。可以说类是C++的灵魂，如果不能真正的掌握类，就不能说掌握了C++。
C++支持面向对象的程序设计，同时也支持面向过程的程序设计。我们在前面也介绍了C++在面向过程中的知识点。基于对象就是基于类，与面向对象的程序设计不同，基于对象的程序是以类为基础，程序的操作都是围绕对象来进行的。在此机制上，就有了继承和多态性。
面向对象设计面向的是一个个对象，所有的数据属于不同的对象。在面向过程的结构化设计中，人们将程序描述为算法和数据结构的集合，算法和数据结构是相互独立，分开来设计的。在实践中，人们逐渐认识到，算法和数据结构是互相紧密连接，不可分割的。应当以一个算法定义一组数据结构，而不宜一个算法定义多个数据结构。
对象就是数据和数据操作的方法的集合，而类是包含许多个对象的集合。

定义类和变量
定义结构体的方法：
struct Student
{
  char name[128];
  int age;
  char add[128];
  };
  
类的定义格式：
class 类名
{
  private:// //成员访问限制符
            成员数据;
            成员函数；
public :  //public设置之前的成员都是上面所设置的私有的
            成员数据;
      成员函数；
protected:
      成员数据;
      成员函数；
};
类也是一种数据类型，它是一种我们自己定义的广义的数据类型。
private
私有的，只能在类的内部访问，类的外部不能访问。
protected
受保护的，只能在类的内部访问，类的外部不能访问，还可以在它的派生类中访问，派生类后面会详细介绍。
public
公有的，类的外部和内部都可以访问。
一个类可以包含多个成员访问限制符，每一个生效的范围直到下一个限制符被设置，如果没有被设置的话，默认为私有的。虽然同一个访问限制符可以出现多次，但是为了代码的简洁，我们应当让它们只出现一次。还有让public的成员放在类的声明前面。因为别人在观看你的代码的时候只会在意你的public成员，其它对外界隐藏的成员对于外界是没有意义的。
C++中新增了类这个关键字，依然保留了结构，只是将结构进行了扩展，使它也可以定义成员函数。与类不同的是，结构中未声明访问限制的时候就会默认为公有的。
如下面这个print()函数在结构体中就是公有的，如果在类中没有被声明访问限制就是私有的。

对象成员的访问
程序中访问对象成员有以下三种方法：
1.通过对象名和成员访问运算符"."来访问。
上一个章节我们就是这样调用函数的，如stu.getAge();
2.通过指向对象的指针来访问
Student *p=&stu; //创建一个指针指向对象stu
p->getAge();  //指针对成员的访问使用->访问
3.通过引用来访问
Student &s=stu;  //创建一个引用类型
s.getAge();  //利用引用类型访问成员

我们以后没添加一个类就需要添加对应的两个文件，分离之后的文件与之前没有分离的效果是一样的，但是整个工程的结构就变得清晰了。如果我们需要复用某一个类，这样也是最方便的。
#ifnodef STUDENT_H  //头文件卫士，避免头文件的重复包含被多次编译
#define STUDENT_H
//类的声明
#endif
