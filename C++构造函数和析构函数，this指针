构造函数简介
在上一个章节我们在创建好类的对象之后，首先对它的每一个成员属性赋值之后再对它们进行输出操作，如果不赋值就输出，这些值就会是垃圾值。而为了代码的简介，一次性为所有成员属性初始化，C++的类提供了这样的一个函数—构造函数。
C++提供构造函数来处理对象的初始化。
1.构造函数是一种特殊的成员函数，不需要用户来调用，定义对象时被自动执行。
2.构造函数名字与类名相同，无返回类型。
3.可
4.如果我们没有定义构造函数，系统会为我们自动定义一个无参的默认构造函数的，它不对成员属性做任何操作，如果我们自己定义了构造函数，系统就不会为我们创建默认构造函数了。
默认参数构造函数
CTime() { }
带参数的构造函数:这样的一个构造函数提供了一个三个成员属性的初始化，声明对象的时候就可以传入参数了。

CTime time(Hour ,Minute, Second )；//对象的定义
CTime(int Hour ,int Minute,int Second )  { 
m_nHour=Hour;  m_nMinute=Minute;  m_nSecond=Second; }
在有了构造函数之后，我们声明时传入参数调用的构造函数等同于下面注释的代码。此时因为已经没有了默认的构造函数，就不能再想上一个章节那样不传入参数进行对象的创建了。
构造函数的重载
在一个类中可以有多个构造函数，它们构成了函数的重载。
下面两个构造函数构成了重载，我们可以在声明对象的时候传入不同的参数调用不同的构造函数。此时可以依旧像上一个章节那样对象不传入任何参数，也不需要再对它们一一初始化，这一切都有构造函数做了。对象在创建的时候会根据传入参数的类型来调用不同的构造函数，这和普通函数的调用是一致的。
这是一个含有默认参数的构造函数，默认参数的函数的使用和我们在函数那一章的规则是一样的。
中间的构造函数的所有参数都有默认值，这样是不可以的，在有三个构造函数的情况下，我们创建一个没有传入参数的对象的时候，它是应该调用第一个无参的默认构造函数呐？还是第二个符合默认参数规则的构造函数呐？这样就造成了二义性，是不可以的。
析构函数简介
它的作用与构造函数相反，一般是执行对象的清理工作，当对象的生命周期结束的时候，会自动的调用。析构函数的作用并不是删除对象，在对象撤销它所占用的内存之前，做一些清理的工作。清理之后，这部分内存就可以被系统回收再利用了。在设计这个类的时候，系统也会默认的提供一个析构函数。在对象的生命周期结束的时候，程序就会自动执行析构函数来完成这些工作。同构造函数，用户自己定义，系统自动调用。
1.析构函数没有返回值，没有参数；
2.没有参数，所以不能重载，一个类仅有一个析构函数；
3.析构函数除了释放工作，还可以做一些用户希望它做的一些工作，比如输出一些信息。
它的命名规则如下：
~CTime();
定义如下：这个析构函数为了显示它在什么时候被调用，我们利用它输出一句话以告知我们它被调用了。
运行结果如下：我们在main函数里面创建了四个CTime对象，所以在退出main函数之后，四个对象的生命周期结束，析构函数被调用了四次。如果我们是在main函数的外面创建的对象，这个对象的销毁是在我们退出程序之后。析构函数销毁对象的顺序与构建对象的顺序是相反的。因为对象的存储是在栈中的，栈的特性就是先进后出。
如果我们使用new运算符来动态的创建一个对象，这个对象是不会自动被销毁的，我们需要手动使用delete销毁，这个时候析构函数随着delete的使用而被调用，在程序结束的时候就不会再销毁这个对象了。

我们在声明一个类的时候，编译器是不会为这个类申请一个空间的，只有创建这个类的实例—对象，才会为对象分配空间。我们定义了多个对象，每一个对象都有自己的存储空间。但是所有对象都是公用成员方法的，那么问题就来了，不同的对象怎么调用不同的方法操作的是自己的数据成员呐？
如下面每一个对象都调用了相同的成员函数，但是成员函数的实现却只有一个，其实在每一个成员函数中，都包含一个特殊的指针—this指针。我们通过一个对象调用一个成员函数，编译器就将对象的起始地址赋值给成员函数的this指针，在成员函数内部，通过this指针来操作对象的数据成员。
1.this指针是指向本类对象的指针，它作为参数传递给成员函数；
2.由编译器自动实现，程序员不必人为的在形参中添加this指针。
在上一个章节中我们省略了this指针的书写，由于this是一个指针，所以需要通过->来访问它的成员。因为this是一个指向调用该成员函数的对象的指针，那么*this就是这个对象，这样，我们也可以通过.来调用它的成员。下面两句话是等效的。大家要注意那一个括号，.运算符的优先级比较高。所以必须添加括号使*和tnis先结合。this指针我们一般不会使用，只有在一些场合才会显式地使用。
 复制构造函数
复制构造函数是一种特殊的构造函数，在创建一个新的对象时将其他对象作为参数时，编译器将会调用复制构造函数。不提供时使用默认复制构造函数。默认复制构造函数内部为各个成员变量赋值。在我们创建了自己的复制构造函数之后，系统就不会为我们添加默认构造函数了。
创建之后，新对象是老对象的副本，二者值相同。但具有不同的存储空间。
形式：
CTime(CTime& time); //复制构造函数的声明形式
注意：复制构造函数的参数必须是传引用，如果变成传值，对象作为函数参数传值会调用赋值构造函数，就会形成一个循环。
如下代码：该构造函数实现的功能和系统为我们预定义的构造函数的功能是一样的，各自为它们的数据成员赋初值。复制构造函数需要两个参数，左操作数为调用它的对象，而右操作数为它的参数。
CTime time;
CTime time2(time);  //使用已有的对象创建一个新的构造函数，复制构造函数被调用。使两个对象的数据成员完全一样。
调用复制构造函数的时机：
1.以其他对象作为参数创建新对象时；
2.类对象（传值方式）作为函数参数时。
①号区域将会是第一种情况调用复制构造函数，而二号区域是第二种情况调用它。
③.类对象作为函数返回值时
Func函数返回了一个对象，编译器产生了一个临时对象，造成了对象的复制。

